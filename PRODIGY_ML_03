pip install scikit-learn numpy matplotlib Pillow
import os
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from PIL import Image

# Path to the dataset directory
dataset_dir = "/path/to/dataset/"

# List all image file names in the dataset directory
image_files = os.listdir(dataset_dir)

# Initialize lists to store data and labels
data = []
labels = []

# Load images and labels
for img_file in image_files:
    if "cat" in img_file:
        label = 0  # Cat label
    elif "dog" in img_file:
        label = 1  # Dog label
    else:
        continue
    
    img_path = os.path.join(dataset_dir, img_file)
    img = Image.open(img_path).convert('L')  # Convert to grayscale
    img_array = np.array(img)
    
    data.append(img_array.reshape(-1))  # Flatten the image array
    labels.append(label)

# Convert lists to arrays
data = np.array(data)
labels = np.array(labels)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create an SVM model
svm = SVC(kernel='linear', C=1.0, random_state=42)

# Train the SVM model
svm.fit(X_train_scaled, y_train)

# Make predictions
y_pred = svm.predict(X_test_scaled)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
